--EDA
select * from products;

select * from category;
select * from sellers;
select * from order_items;

select distinct payment_status from payments;

select * from shippings
where return_date is not null;
--6747
select * from payments
where order_id = 6747;

-------------------------------
--Business Problem
--Advanced Analysis
-------------------------------

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
select * from order_items;

--creating new column 

alter table order_items
add column total_sales float;

--updating price qty * price per unit
update order_items
set total_sales=quantity*price_per_unit;

select * from order_items
order by quantity desc;

select oi.product_id,
p.product_name,sum(oi.total_sales) as total_sales,
count(o.order_id) as total_orders
from orders as o
join order_items as oi
on oi.order_id=o.order_id
join products p 
on p.product_id=oi.product_id
group by 1,2
order by 3 desc
limit 10

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
select p.category_id,
	c.category_name, 
	sum(oi.total_sales) as total_sales,
	sum(oi.total_sales)/(select sum(total_sales) from order_items) * 100 as total_contribution
from order_items as oi
join products as p
on p.product_id=oi.product_id
left join category as c
on c.category_id=p.category_id
group by 1,2
order by 3 desc

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
select c.customer_id,concat(c.first_name,' ',c.last_name) as full_name,
sum(total_sales)/count(o.order_id) as AOV,count(o.order_id) as total_orders
from orders as o
join customers as c
on c.customer_id=o.customer_id
join order_items as oi
on oi.order_id=o.order_id
group by 1,2
having count(o.order_id)>5;

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

select year,month,total_sales as current_month_sale,
lag(total_sales,1)over(order by year,month) as last_month_sale from
(
select 
extract(year from o.order_date) as year,
extract(month from o.order_date)as month,
round(sum(oi.total_sales::numeric),2) as total_sales
from orders as o
join order_items as oi
on oi.order_id=o.order_id
where order_date>=current_date-interval '1 year'
group by 1,2
order by 1,2) as t1

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
--Method 1
	
select * from customers as c
left join orders as o 
on o.customer_id=c.customer_id
where o.customer_id is null;

--Method 2

select * from customers
where customer_id not in (select distinct customer_id from orders)
/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/
	
with ranking_table as (
	select c.state,cat.category_name,sum(oi.total_sales) as total_sales,
	rank() over(partition by c.state order by sum(oi.total_sales)asc) as rnk
	from orders as o
join customers as c
on c.customer_id=o.customer_id
join order_items as oi
on o.order_id=oi.order_id
join products as p
on oi.product_id=p.product_id
join category as cat
on cat.category_id=p.category_id
group by c.state,cat.category_name)
	
select * from ranking_table
where rnk=1;

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

select c.customer_id,concat(c.first_name,' ',c.last_name) as full_name,
sum(total_sales) as CLTV,
dense_rank() over(order by sum(total_sales) desc) as cx_ranking
from orders as o
join customers as c
on c.customer_id=o.customer_id
join order_items as oi
on oi.order_id=o.order_id
group by 1,2


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

select i.inventory_id,
	p.product_name,
	i.stock as current_stock_left,
	i.last_stock_date,
	i.warehouse_id
	from inventory as i
join products as p
on p.product_id=i.product_id
where i.stock<10


/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/
	
select c.*,o.*,s.shipping_providers,s.shipping_date-o.order_date as days_took_to_ship
from orders as o
join customers as c
on c.customer_id=o.customer_id
join shippings as s
on o.order_id=s.order_id
where s.shipping_date-o.order_date>3

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

select p.payment_status,count(*) as total_cnt,
	count(*)::numeric/(select count(*) from payments)::numeric*100 as payment_percentage
	from orders as o
join payments as p
on o.order_id=p.order_id
group by 1



/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/
with top_sellers as (
select s.seller_id,s.seller_name,sum(oi.total_sales) as total_sales from orders as o
join sellers as s
on s.seller_id=o.seller_id
join order_items as oi
on oi.order_id=o.order_id
group by 1,2
order by 3 desc
limit 5
),
	
seller_reports as(
select o.seller_id,ts.seller_name,o.order_status,count(*) as total_orders from orders as o
join 
top_sellers as ts
on ts.seller_id=o.seller_id
where o.order_status not in ('Returned','Inprogress')
group by 1,2,3
)

select seller_id,seller_name,
	sum(case when order_status='Completed' then total_orders else 0 end) as Completed_Orders,
	sum(case when order_status='Cancelled' then total_orders else 0 end) as Cancelled_Orders,
	sum(total_orders) as total_orders,
	sum(case when order_status='Completed' then total_orders else 0 end)::numeric
	/sum(total_orders)::numeric *100 as successful_order_percentage
	from seller_reports
	group by 1,2


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

select product_id,
	product_name,
	profit_margin,
	dense_rank() over(order by profit_margin desc) as product_ranking
from 
	(select p.product_id,p.product_name,
	sum(total_sales-(p.cogs*oi.quantity))/sum(total_sales)*100 as profit_margin
	
from order_items as oi
join products as p
on p.product_id=oi.product_id
group by 1,2) as t1


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/



/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/


/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/


/*
17. Cross-Sell Opportunities
Find customers who purchased product A but not product B (e.g., customers who bought AirPods but not AirPods Max).
Challenge: Suggest cross-sell opportunities by displaying matching product categories.
*/


/*
18. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/



/*
19. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/


/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/


/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 


